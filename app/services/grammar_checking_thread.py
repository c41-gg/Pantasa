import threading

class GrammarCheckingServiceThread(threading.Thread):
    def __init__(self):
        """
        Initializes the GrammarCheckingServiceThread.
        This class serves as the base class for grammar-checking tasks.
        """
        super().__init__()
        self.input_words = []
        self.input_lemmas = []
        self.input_pos = []
        self.ngram_size = 0
        self.output_suggestions = []
        self.has_exception_encountered = False

    def set_input_values(self, input_words, input_lemmas, input_pos, ngram_size):
        """
        Set the input values required for the grammar-checking task.

        Args:
        - input_words: List of words from the input sentence.
        - input_lemmas: List of lemmas corresponding to the words.
        - input_pos: List of POS tags corresponding to the words.
        - ngram_size: Size of the n-gram to be used in the checking process.
        """
        self.input_words = input_words
        self.input_lemmas = input_lemmas
        self.input_pos = input_pos
        self.ngram_size = ngram_size

    def run(self):
        """
        Runs the grammar-checking task.
        This method is called when the thread is started.
        """
        try:
            self.perform_task()
        except Exception as e:
            self.has_exception_encountered = True
            print(f"Exception encountered: {e}")

    def perform_task(self):
        """
        Abstract method for subclasses to implement the specific grammar-checking logic.
        """
        raise NotImplementedError("Subclasses must implement the perform_task method.")

    def get_suggestions(self):
        """
        Returns the suggestions generated by the service.

        Returns:
        - List of suggestions generated by the grammar-checking task.
        """
        return self.output_suggestions

